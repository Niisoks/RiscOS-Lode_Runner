#include "config.h"
#include "entity.h"
#include "wimp.h"
#include "main.h"
#include "render.h"
#include <stdlib.h>
#include <string.h>

int currentGameSize = DEFAULT_GAME_SIZE;
int completedLevels[MAX_COMPLETED_LEVELS];
int lastMenuPage = 0;
int lastMenuSelection = 0;

int loadConfig(void) {
    FILE *file = fopen(CONFIG_FILE_PATH, "r");
    if (!file) {
        currentGameSize = DEFAULT_GAME_SIZE;
        lastMenuPage = 0;
        lastMenuSelection = 0;
        return 1;
    }

    char line[256];
    int lineNumber = 0;

    while (fgets(line, sizeof(line), file) && lineNumber < 3) {
        switch (lineNumber) {
            case 0: 
                {
                    int size = atoi(line);
                    if (size >= 1 && size <= 4) {
                        currentGameSize = size;
                    } else {
                        currentGameSize = DEFAULT_GAME_SIZE;
                    }
                }
                break;
            case 1: 
                lastMenuPage = atoi(line);
                if (lastMenuPage < 0) lastMenuPage = 0;
                break;
            case 2: 
                lastMenuSelection = atoi(line);
                if (lastMenuSelection < 0) lastMenuSelection = 0;
                break;
        }
        lineNumber++;
    }

    if (lineNumber == 0) {
        currentGameSize = DEFAULT_GAME_SIZE;
    }
    if (lineNumber <= 1) {
        lastMenuPage = 0;
    }
    if (lineNumber <= 2) {
        lastMenuSelection = 0;
    }

    fclose(file);
    return 1;
}

int saveConfig(void) {
    FILE *file = fopen(CONFIG_FILE_PATH, "w");
    if (!file) {
        return 0;
    }

    fprintf(file, "%d\n", currentGameSize);
    fprintf(file, "%d\n", lastMenuPage);
    fprintf(file, "%d\n", lastMenuSelection);
    fclose(file);
    return 1;
}

void setGameSize(int newSize) {
    if (newSize >= 1 && newSize <= 3) {
        currentGameSize = newSize;
        saveConfig();
    }
}

int getGameSize(void) {
    return currentGameSize;
}

void initializeSaveData(void) {
    for (int i = 0; i < MAX_COMPLETED_LEVELS; i++) {
        completedLevels[i] = 0;
    }
}

int loadSaveFile(void) {
    initializeSaveData();

    FILE *file = fopen(SAVE_FILE_PATH, "r");
    if (!file) {

        return saveSaveFile();
    }

    char line[256];
    while (fgets(line, sizeof(line), file)) {
        int levelNumber = atoi(line);
        if (levelNumber >= 1 && levelNumber <= MAX_COMPLETED_LEVELS) {
            completedLevels[levelNumber - 1] = 1;
        }
    }

    fclose(file);
    return 1;
}

int saveSaveFile(void) {
    FILE *file = fopen(SAVE_FILE_PATH, "w");
    if (!file) {
        return 0;
    }

    for (int i = 0; i < MAX_COMPLETED_LEVELS; i++) {
        if (completedLevels[i]) {
            fprintf(file, "%d\n", i + 1);
        }
    }

    fclose(file);
    return 1;
}

void markLevelCompleted(int levelNumber) {
    if (levelNumber >= 1 && levelNumber <= MAX_COMPLETED_LEVELS) {
        completedLevels[levelNumber - 1] = 1;
        saveSaveFile();
    }
}

int isLevelCompleted(int levelNumber) {
    if (levelNumber >= 1 && levelNumber <= MAX_COMPLETED_LEVELS) {
        return completedLevels[levelNumber - 1];
    }
    return 0;
}

void saveMenuState(int page, int selection) {
    lastMenuPage = page;
    lastMenuSelection = selection;
    saveConfig();
}

void loadMenuState(int *page, int *selection) {
    *page = lastMenuPage;
    *selection = lastMenuSelection;
}