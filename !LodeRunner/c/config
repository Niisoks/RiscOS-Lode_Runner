#include "config.h"
#include "entity.h"
#include "wimp.h"
#include "main.h"
#include "render.h"
#include <stdlib.h>
#include <string.h>

int currentGameSize = DEFAULT_GAME_SIZE;
int completedLevels[MAX_COMPLETED_LEVELS];

int loadConfig(void) {
    FILE *file = fopen(CONFIG_FILE_PATH, "r");
    if (!file) {
        currentGameSize = DEFAULT_GAME_SIZE;
        return 1;
    }

    char line[256];
    if (fgets(line, sizeof(line), file)) {
        int size = atoi(line);
        if (size >= 1 && size <= 4) {
            currentGameSize = size;
        } else {
            currentGameSize = DEFAULT_GAME_SIZE;
        }
    } else {
        currentGameSize = DEFAULT_GAME_SIZE;
    }

    fclose(file);
    return 1;
}

int saveConfig(void) {
    FILE *file = fopen(CONFIG_FILE_PATH, "w");
    if (!file) {
        return 0;
    }

    fprintf(file, "%d\n", currentGameSize);
    fclose(file);
    return 1;
}

void setGameSize(int newSize) {
    if (newSize >= 1 && newSize <= 3) {
        currentGameSize = newSize;
        saveConfig();
    }
}

int getGameSize(void) {
    return currentGameSize;
}

void initializeSaveData(void) {
    for (int i = 0; i < MAX_COMPLETED_LEVELS; i++) {
        completedLevels[i] = 0;
    }
}

int loadSaveFile(void) {
    initializeSaveData();

    FILE *file = fopen(SAVE_FILE_PATH, "r");
    if (!file) {

        return saveSaveFile();
    }

    char line[256];
    while (fgets(line, sizeof(line), file)) {
        int levelNumber = atoi(line);
        if (levelNumber >= 1 && levelNumber <= MAX_COMPLETED_LEVELS) {
            completedLevels[levelNumber - 1] = 1;
        }
    }

    fclose(file);
    return 1;
}

int saveSaveFile(void) {
    FILE *file = fopen(SAVE_FILE_PATH, "w");
    if (!file) {
        return 0;
    }

    for (int i = 0; i < MAX_COMPLETED_LEVELS; i++) {
        if (completedLevels[i]) {
            fprintf(file, "%d\n", i + 1);
        }
    }

    fclose(file);
    return 1;
}

void markLevelCompleted(int levelNumber) {
    if (levelNumber >= 1 && levelNumber <= MAX_COMPLETED_LEVELS) {
        completedLevels[levelNumber - 1] = 1;
        saveSaveFile();
    }
}

int isLevelCompleted(int levelNumber) {
    if (levelNumber >= 1 && levelNumber <= MAX_COMPLETED_LEVELS) {
        return completedLevels[levelNumber - 1];
    }
    return 0;
}