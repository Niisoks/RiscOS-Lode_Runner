#include "main.h"
#include "entity.h"
#include "render.h"
#include "wimp.h"
#include "enemy.h"
#include "text.h"
#include "menu.h"
#include "config.h"

char map[HEIGHT][WIDTH + 1];
char currentLevelName[256] = "unknown";

int loadMapFromFile(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        return 0;
    }

    char buffer[256];
    int y = 0;

    for (int mapY = 0; mapY < HEIGHT; mapY++) {
        for (int mapX = 0; mapX < WIDTH; mapX++) {
            map[mapY][mapX] = ' ';
        }
        map[mapY][WIDTH] = '\0';
    }

    for (int borderY = 0; borderY < HEIGHT; borderY++) {
        map[borderY][0] = 'S';
        map[borderY][WIDTH-1] = 'S';
    }

    while (y < 15 && fgets(buffer, sizeof(buffer), file)) {
        char *newline = strchr(buffer, '\n');
        if (newline) *newline = '\0';
        newline = strchr(buffer, '\r');
        if (newline) *newline = '\0';

        int len = strlen(buffer);
        
        for (int x = 0; x < 20 && x < len; x++) {
            map[y][x+1] = buffer[x];
        }

        y++;
    }

    for (int x = 0; x < WIDTH; x++) {
        map[y][x] = 'S';
    }

    fclose(file);
    return 1;
}


GameState gameState;
os_t timer = 0;
void (*timerCallback)(void*) = NULL;
void *timerWorkspace = NULL;
os_t holeTimer[HEIGHT][WIDTH];
int dug[HEIGHT][WIDTH];
int playerIsFalling = 0;
int keyState[4] = {0, 0, 0, 0};
int keyPressedThisFrame[4] = {0, 0, 0, 0};

void initialiseTimer(void) {
    timer = 0;
    timerCallback = NULL;
    timerWorkspace = NULL;
}

void setTimer(int cs, void (*callback)(void*), void *ws) {
    timer = os_read_monotonic_time() + cs;
    timerCallback = callback;
    timerWorkspace = ws;   
}

void updateTimer(void) {
    if (timer > 0) {      
        os_t time = os_read_monotonic_time();
        if (time >= timer) {
            timer = 0;
            timerCallback(timerWorkspace);
        }
    }
}

void countGold(GameState *state) {
    int x, y;

    state->goldTotal = 0;
    for (y = 0; y < HEIGHT; y++) {
        for (x = 0; x < WIDTH; x++) {
            if (map[y][x] == 'G') {
                state->goldTotal++;
            }
        }
    }
}

void initialiseGame(GameState *state) {
    state->player.tileX = 6;
    state->player.tileY = 7;
    state->player.visualX = 6.0f;
    state->player.visualY = 7.0f;

    state->enemyCount = 0;

    for (int y = 0; y < HEIGHT; y++) {
        for (int x = 0; x < WIDTH; x++) {
            if (map[y][x] == 'P') {

                state->player.tileX = x;
                state->player.tileY = y;
                state->player.visualX = (float)x;
                state->player.visualY = (float)y;

                map[y][x] = ' ';
            }
            else if (map[y][x] == 'E' && state->enemyCount < 5) {

                int enemyIndex = state->enemyCount;
                state->enemies[enemyIndex].tileX = x;
                state->enemies[enemyIndex].tileY = y;
                state->enemies[enemyIndex].visualX = (float)x;
                state->enemies[enemyIndex].visualY = (float)y;

                map[y][x] = ' ';
                state->enemyCount++;
            }
        }
    }

    if (state->enemyCount == 0) {
        state->enemies[0].tileX = 15;
        state->enemies[0].tileY = 7;
        state->enemies[0].visualX = 15.0f;
        state->enemies[0].visualY = 7.0f;
        state->enemyCount = 1;
    }

    state->player.targetX = state->player.visualX;
    state->player.targetY = state->player.visualY;
    state->player.isMoving = 0;
    state->player.moveDir = NEUTRAL;
    state->player.inHole = 0;
    state->player.isDigging = 0;  
    state->player.digDirection = 0;
    state->player.digTimer = 0;
    state->player.prevVisualX = state->player.visualX;
    state->player.prevVisualY = state->player.visualY;
    state->player.hasMoved = 0;

    for (int i = 0; i < state->enemyCount; i++) {
        state->enemies[i].targetX = state->enemies[i].visualX;
        state->enemies[i].targetY = state->enemies[i].visualY;
        state->enemies[i].isMoving = 0;
        state->enemies[i].moveDir = NEUTRAL;
        state->enemies[i].inHole = 0;
        state->enemies[i].isDigging = 0;  
        state->enemies[i].digDirection = 0;
        state->enemies[i].digTimer = 0;
        state->enemies[i].prevVisualX = state->enemies[i].visualX;
        state->enemies[i].prevVisualY = state->enemies[i].visualY;
        state->enemies[i].hasMoved = 0;
    }

    initialiseAnimStates();

    state->goldCollected = 0;
    countGold(state);
    state->frame = 0;
    state->gameOver = 0;
    state->pixelSpeed = 0.15f;
    state->enemyUpdateCooldown = 0;

    for (int y = 0; y < HEIGHT; y++) {
        for (int x = 0; x < WIDTH; x++) {
            holeTimer[y][x] = 0;
            dug[y][x] = 0;
        }
    }

    setTimer(4, updateGame, (void*)state);
}

void processKeyPress(int keyCode, GameState *state) {
    if (isMenuActive()) {
        processMenuInput(keyCode);
        return;
    }

    switch (keyCode) {
        case wimp_KEY_LEFT:
            keyPressedThisFrame[0] = 1;
            moveEntity(state, &state->player, LEFT, 1);
            break;
        case wimp_KEY_RIGHT:
            keyPressedThisFrame[1] = 1;
            moveEntity(state, &state->player, RIGHT, 1);
            break;
        case wimp_KEY_UP:
            keyPressedThisFrame[2] = 1;
            moveEntity(state, &state->player, UP, 1);
            break;
        case wimp_KEY_DOWN:
            keyPressedThisFrame[3] = 1;
            moveEntity(state, &state->player, DOWN, 1);
            break;
        case 'z':
        case 'Z':
            dig(state, -1);
            break;
        case 'x':
        case 'X':
            dig(state, 1);
            break;
        case 'q':
        case 'Q':
            setTimer(120, (void(*)(void*))showMenu, NULL);  
            return;
    }
}

void trackKeyStates(GameState *state) {
    if (isMenuActive()) {
        return;
    }

    Entity *player = &state->player;

    if (keyState[0] && !keyPressedThisFrame[0]) {
        if (player->isMoving && player->moveDir == LEFT) {
            player->targetX = player->visualX; 
            player->isMoving = 0;
        }
    }

    if (keyState[1] && !keyPressedThisFrame[1]) {
        if (player->isMoving && player->moveDir == RIGHT) {
            player->targetX = player->visualX; 
            player->isMoving = 0;
        }
    }

    for (int i = 0; i < 4; i++) {
        keyState[i] = keyPressedThisFrame[i];
        keyPressedThisFrame[i] = 0;
    }
}

void updateGame(void *ws) {
    GameState *state = (GameState *)ws;

    if (isMenuActive()) {
        updateWindow(gameWindow);
        setTimer(4, updateGame, ws);
        return;
    }

    if (state->gameOver) {
        updateWindow(gameWindow);
        setTimer(4, updateGame, ws);
        return;
    }

    trackKeyStates(state);

    state->frame++;

    if (showCenteredMessage) {
        if (--centeredMessageTimer <= 0) {
            showCenteredMessage = 0;
            centeredMessage[0] = '\0';
        }
    }

    if (state->player.isDigging) {
        state->player.digTimer--;
        if (state->player.digTimer <= 0) {
            state->player.isDigging = 0;

            if (keyState[0]) {
                moveEntity(state, &state->player, LEFT, 1);
            } else if (keyState[1]) {
                moveEntity(state, &state->player, RIGHT, 1);
            } else if (keyState[2]) {
                moveEntity(state, &state->player, UP, 1);
            } else if (keyState[3]) {
                moveEntity(state, &state->player, DOWN, 1);
            }
        }
    }
    updateMovementAnimation(state);
    updateAnimationFrames(state); 
    if (!state->player.isMoving) {
        applyGravity(state);
    }
    updateEnemyAI(state);  
    updateHoleTimers(state);
    checkForGold(state);

    if (checkCollision(state)) {  
        state->gameOver = 1;
        setCenteredMessage("game over.\npress q for menu");
    }

    if (state->goldCollected >= state->goldTotal) {
        setTimer(120, (void(*)(void*))showMenu, NULL);  
        return;
    }

    updateWindow(gameWindow);

    setTimer(4, updateGame, ws);
}

void exitGame(void) {
    if (block) {
        free(block);
        block = NULL;
    }
    if (window) {
        free(window);
        window = NULL;
    }
    if (spriteArea) {
        free(spriteArea);
        spriteArea = NULL;
    }
    
    wimp_close_down(0);
    exit(0);
}

void loadLevel(int level) {
    char filename[256];
    sprintf(filename, "<LodeRunner$Dir>.maps.level%d", level);
    loadLevelFromPath(filename);
}

void loadLevelFromPath(const char *levelPath) {
    drawBlackSquaresOnScreen();

    const char *filename = strrchr(levelPath, '.');
    if (filename) {
        filename++; 
        strncpy(currentLevelName, filename, sizeof(currentLevelName) - 1);
        currentLevelName[sizeof(currentLevelName) - 1] = '\0';
    } else {
        strcpy(currentLevelName, "unknown");
    }

    for (int y = 0; y < HEIGHT; y++) {
        for (int x = 0; x < WIDTH; x++) {
            map[y][x] = ' ';
        }
        map[y][WIDTH] = '\0';
    }

    int mapLoaded = loadMapFromFile(levelPath);

    if (!mapLoaded) {
        const char* defaultMap[] = {
            "P  G    H   G       ",
            "  H###H###H#####    ",
            "  H#  H  #H         ",
            "  H# #H# #H  ###### ",
            "  H# #H# #H    G    ",
            " #H# #H# #####H#    ",
            "  H   H#---G  H     ",
            "  H   H     HE##### ",
            "  H   H-----H#      ",
            "  H --H             ",
            "  H   H    ##H      ",
            "  H   H      H      ",
            "  H   H      H      ",
            "  H   H      H      ",
            "GGGGGGGGGGGGGGGGGGGG"   
        };

        for (int y = 0; y < HEIGHT; y++) {
            for (int x = 0; x < WIDTH; x++) {
                map[y][x] = ' ';
            }
            map[y][WIDTH] = '\0';
        }

        for (int x = 0; x < WIDTH; x++) {
            map[HEIGHT-1][x] = 'S'; 
        }
        for (int y = 0; y < HEIGHT; y++) {
            map[y][0] = 'S';        
            map[y][WIDTH-1] = 'S';  
        }

        for (int y = 0; y < 15; y++) {
            int len = strlen(defaultMap[y]);
            for (int x = 0; x < 20 && x < len; x++) {
                map[y+1][x+1] = defaultMap[y][x]; 
            }
        }

        strcpy(currentLevelName, "default");
    }

    initialiseGame(&gameState);
}

int main(void) {
    loadConfig();
    
    wimp_initialise(wimp_VERSION_RO3, "Lode Runner", NULL, NULL);

    updateModeInfo();
    spriteArea = loadSpriteFile("<LodeRunner$Dir>.sprites");

    initialiseText();
    initialiseMenu();

    window = createWindow();
    createWimpBlock(window);

    initialiseTimer();

    xwimp_open_window(&block->open);

    osbool quit = FALSE;
    while(!quit) {
        wimp_event_no event = wimp_poll(0, block, NULL);

        if (event == wimp_NULL_REASON_CODE) {
            updateTimer();
        } else {
            quit = update(event, block);
        }
    }

    free(block);
    free(window);
    wimp_close_down(0);

    return 0;
}