#ifndef ENTITY_H
#define ENTITY_H

#include "oslib/wimp.h"
#include "oslib/os.h"        
#include "oslib/osfile.h"
#include "oslib/osspriteop.h"                    
#include "oslib/colourtrans.h"
#include <math.h>

typedef enum {
    NEUTRAL = 0,
    LEFT = 1,
    RIGHT = 2,
    UP = 3,
    DOWN = 4
} Direction;

#define GAME_SIZE 2
#define WIDTH 20
#define HEIGHT 20
#define TILE_SIZE (32 * GAME_SIZE)
#define HOLE_REGENERATION_TIME 300
#define WALL_PADDING 0.0f

typedef struct {
    int tileX, tileY;
    float visualX, visualY;
    float targetX, targetY;
    int isMoving;
    Direction moveDir;
    int inHole;
    int isDigging;
    int digDirection;
    int digTimer;
    float prevVisualX, prevVisualY;
    int hasMoved;
} Entity;

typedef struct {
    Entity player;
    Entity enemies[5];
    int enemyCount;
    int goldCollected;
    int goldTotal;
    int frame;
    int gameOver;
    float pixelSpeed;
    int enemyUpdateCooldown;
} GameState;

typedef struct {
    int walkFrame;
    int climbFrame;
    int ropeFrame;
    int fallFrame;
    int lastWalkFrame;
    int lastClimbFrame;
    int lastRopeFrame;
} AnimationState;

extern char map[HEIGHT][WIDTH + 1];
extern os_t holeTimer[HEIGHT][WIDTH];
extern int dug[HEIGHT][WIDTH];
extern int playerIsFalling;

extern AnimationState playerAnim;
extern GameState gameState;

extern osspriteop_header *playerSprite1, *playerSprite2;
extern osspriteop_header *playerSprite3, *playerSprite4;
extern osspriteop_header *playerClimbSprite1, *playerClimbSprite2, *playerClimbSprite3, *playerClimbSprite4;
extern osspriteop_header *playerDigSprite1, *playerDigSprite2;
extern osspriteop_header *playerFallSprite1, *playerFallSprite2;
extern osspriteop_header *playerRopeSprite1, *playerRopeSprite2, *playerRopeSprite3, *playerRopeSprite4;
extern osspriteop_header *enemySprite1, *enemySprite2;
extern osspriteop_header *enemySprite3, *enemySprite4;
extern osspriteop_header *enemyClimbSprite1, *enemyClimbSprite2, *enemyClimbSprite3, *enemyClimbSprite4;
extern osspriteop_header *enemyFallSprite1, *enemyFallSprite2;
extern osspriteop_header *enemyRopeSprite1, *enemyRopeSprite2, *enemyRopeSprite3, *enemyRopeSprite4;
extern osspriteop_header *wallSprite, *ladderSprite, *goldSprite, *holeSprite, *tightropeSprite;
extern os_factors factors;
extern osspriteop_area *spriteArea;
extern osspriteop_header *blackSquareSprite;

osspriteop_header* getEntitySprite(Entity *entity, GameState *state, int isPlayer, int entityIndex);

void initialisePlayerAnimState(void);
void updatePlayerAnimationFrames(GameState *state);
osspriteop_header* getPlayerSprite(Entity *player, GameState *state);
void movePlayer(GameState *state, Entity *player, Direction dir);
void updateLogicalPosition(Entity *entity);
void updatePlayerMovementAnimation(GameState *state);
void applyPlayerGravity(GameState *state);
void dig(GameState *state, int dx);
int findSafePosition(int x, int y, int *newX, int *newY);
void updateHoleTimers(GameState *state);
void initialiseAnimStates(void);
void moveEntity(GameState *state, Entity *entity, Direction dir, int isPlayer);
void updateMovementAnimation(GameState *state);
void updateAnimationFrames(GameState *state);
void applyGravity(GameState *state);
int checkCollision(GameState *state);


#endif